@startuml diag_c
title Diagramme de classe : Modèles

abstract class ManipulateFiles {
    # deleteRecursive(File): void
}

class Building {
    - id: String
    - name: String
    - description: String
    - photoPath: String
    - Building(String, String, String, List<Area>, String)
    + Building(String, String)
    + static loadAll(Context): List<Building>
    + static load(Context, String): Building
    + static fromJSONString(String): Building
    + static fromJSON(JSONObject): Building
    + reload(Context): boolean
    + toJSON(): JSONObject
    + save(Context): void
    + getPhotoFile(Context): File
    + delete(Context): void
    + getDirectory(Context): File
}

class Area {
    - id: String
    - buildingId: String
    - name: String
    - Area(String, String, String, DirectionPhoto[])
    + Area(String, String)
    + static fromJSONString(String): Area
    + static fromJSON(JSONObject): Area
    + reloadFromBuilding(Building): boolean
    + toJSON(): JSONObject
    + getDirectory(Context): File
    + getDirectionPhoto(Direction): DirectionPhoto
    + setDirectionPhoto(Direction, DirectionPhoto): void
    + getFile(Context, Direction): File
    + delete(Contedxt): void
}
note left: Une zone peut représenter\nune pièce ou un sous-espace\nd'une pièce (cas pour un couloir\nou une grande pièce).

enum Direction {
    NORTH
    EAST
    SOUTH
    WEST
    + getName(Context): String
    + getLeft(): Direction
    + getRight(): Direction
}

class DirectionPhoto {
    - filename: String
    - DirectionPhoto(List<Passage>, String)
    + DirectionPhoto(String)
    + static fromJSON(JSONObject): DirectionPhoto
    + toJSON(): JSONObject
}

class Passage {
    - id: String
    - x1: double
    - y1: double
    - x2: double
    - y2: double
    - autreCoteId: String
    - Passage(String, double, double, double, double, String)
    + Passage(String, double, double, double, double, Area)
    + static fromJSON(JSONObject): Passage
    + toJSON(): JSONObject
    + getAutreCote(List<Area>): Area
    + contains(double, double): boolean
}
note left: Un passage peut représenter\nn'importe quelle zone physique.\nUne porte, un escalier, ou encore\ndu vide pour avancer dans\nune même pièce.

Building -left-|> ManipulateFiles
Area --|> ManipulateFiles

Building "1" --> "*" Area : areas: List<Area>
Area "1" --> "4" DirectionPhoto : directionPhotos: DirectionPhoto[4]
DirectionPhoto "1" --> "*" Passage : passages: List<Passage>

@enduml